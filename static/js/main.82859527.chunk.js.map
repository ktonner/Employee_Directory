{"version":3,"sources":["components/Jumbotron.js","utils/API.js","components/Search.js","components/ResultList.js","components/Alert.js","components/EmployeeContainer.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","className","axios","get","SearchForm","props","type","id","name","value","search","placeholder","aria-label","aria-describedby","onChange","ResultList","scope","results","map","result","i","key","src","picture","large","alt","first","last","dob","age","email","Alert","class","role","EmployeeContainer","state","employees","filtered","handleInputChange","event","setState","target","searchString","toLowerCase","newList","filter","employee","includes","console","log","length","array","render","renderPage","Search","handleFormSubmit","onClick","API","then","data","catch","err","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.82859527.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../App.css';\r\n\r\nfunction Jumbotron() {\r\n  return (\r\n\r\n<div className=\"jumbotron jumbotron-fluid\">\r\n  <div className=\"container\">\r\n    <h1 className=\"display-4\">Employee Directory</h1>\r\n    <p className=\"lead\">Search through all your employees below.</p>\r\n  </div>\r\n</div>\r\n  );\r\n}\r\n\r\nexport default Jumbotron;\r\n","import axios from \"axios\";\r\n\r\nexport default {\r\n    getEmployees(){\r\n        return axios.get(\"https://randomuser.me/api/?results=100&seed=abc\")\r\n    }\r\n}\r\n","import React from 'react';\r\nimport '../App';\r\n\r\nfunction SearchForm(props) {\r\n    return (\r\n<div className=\"input-group mb-3\">\r\n  <input type=\"text\" \r\n  className=\"form-control\" \r\n  id=\"search\" \r\n  name=\"search\"\r\n  value={props.search}\r\n  placeholder=\"Employee Name\" \r\n  aria-label=\"Recipient's username\" \r\n  aria-describedby=\"button-addon2\"\r\n  onChange = {props.onChange}/>\r\n  <div className=\"input-group-append\">\r\n    <button className=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon2\">Search</button>\r\n  </div>\r\n</div>\r\n    )\r\n}\r\n\r\nexport default SearchForm;","import React,{ Component } from \"react\";\r\n\r\n\r\nfunction ResultList(props) {\r\n\r\n\r\n  return (\r\n    <table className=\"table\">\r\n      \r\n  <thead>\r\n    <tr>\r\n      <th scope=\"col\">ID</th>\r\n      <th scope=\"col\">Picture</th>\r\n      <th scope=\"col\">First Name</th>\r\n      <th scope=\"col\">Last Name</th>\r\n      <th scope=\"col\">Age</th>\r\n      <th scope=\"col\">Email</th>\r\n    </tr>\r\n    </thead>\r\n    <tbody>\r\n      {props.results.map((result, i) => \r\n            <tr key={i+1}>\r\n            <td>{i+1}</td>\r\n            <td><img src= {result.picture.large} alt={result.name.first}/></td>\r\n            <td>{(result.name.first)}</td>\r\n            <td>{(result.name.last)}</td>\r\n            <td>{result.dob.age}</td>\r\n            <td>{result.email}</td>\r\n          </tr>\r\n      )}\r\n      </tbody>\r\n      </table>\r\n  );\r\n}\r\n\r\nexport default ResultList;","import React,{ Component } from \"react\";\r\nimport '../App.css';\r\n\r\nfunction Alert() {\r\n  return (\r\n\r\n<div class=\"alert alert-primary\" role=\"alert\">\r\n  No results found, try again\r\n</div>\r\n  );\r\n}\r\n\r\nexport default Alert;","import React, { Component } from \"react\"\r\nimport API from \"../utils/API\"\r\nimport SearchForm from \"./Search\"\r\nimport ResultList from \"./ResultList\"\r\nimport \"../index.css\"\r\nimport Alert from \"./Alert\"\r\n\r\nclass EmployeeContainer extends Component {\r\n    state = {\r\n        employees: [],\r\n        filtered: [],\r\n        search: \"\"\r\n    };\r\n\r\n    handleInputChange = event => {\r\n        // Getting the input and setting it to search dynamically\r\n        this.setState({ search: event.target.value })\r\n        //filter the array of employees by search\r\n        const searchString = (this.state.search).toLowerCase();\r\n        const oldList = this.state.employees\r\n        const newList = oldList.filter(employee => {\r\n            return ((employee.name.first.toLowerCase()).includes(searchString) ||\r\n                (employee.name.last.toLowerCase()).includes(searchString)\r\n            )\r\n        })\r\n        this.setState({ filtered: newList })\r\n        console.log(newList)\r\n        if(this.state.filtered.length < 1){\r\n            let array = this.state.employees\r\n            this.setState({filtered: array})\r\n            this.render()\r\n        }\r\n    };\r\n    \r\n    componentDidMount() {\r\n        API.getEmployees()\r\n            .then(data => {\r\n                // {console.log(data)}\r\n                this.setState({ employees: data.data.results })\r\n                this.setState({ filtered: data.data.results })\r\n                { console.log(this.state.employees) }\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    };\r\n\r\n \r\n\r\n    renderPage = () => {\r\n        if (this.state.filtered.length > 0){\r\n        return (\r\n            <div className=\"container\">\r\n                <SearchForm\r\n                    search={this.state.search}\r\n                    handleFormSubmit={this.handleFormSubmit}\r\n                    onChange={this.handleInputChange}\r\n                    onClick={this.handleInputChange}\r\n                />\r\n                <ResultList results={this.state.filtered} />\r\n            </div>\r\n        );\r\n    }\r\n    else{\r\n        return (\r\n            <div className=\"container\">\r\n            <SearchForm\r\n                search={this.state.search}\r\n                handleFormSubmit={this.handleFormSubmit}\r\n                onChange={this.handleInputChange}\r\n                onClick={this.handleInputChange}\r\n            />\r\n        <Alert></Alert>\r\n        <ResultList results={this.state.filtered} />\r\n        </div>\r\n        )\r\n    }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n        {this.renderPage()}\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EmployeeContainer","import React from 'react';\nimport './App.css';\nimport Jumbotron from './components/Jumbotron'\nimport EmployeeContainer from './components/EmployeeContainer'\n\nfunction App() {\n  return (\n    <div>\n    <Jumbotron/>\n    <EmployeeContainer/>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}